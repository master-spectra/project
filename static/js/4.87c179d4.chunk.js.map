{"version":3,"sources":["utils/validate/validate.js","component/profile/profileForm/postForm.module.scss","component/profile/user/user.module.scss","component/profile/user/status/status.module.scss","component/profile/myPost/myPost.module.scss","component/profile/profileForm/postFormConteiner.js","component/profile/profileForm/postForm.js","component/profile/user/status/StatusConteiner.js","component/profile/user/status/Status.js","component/profile/user/User.js","component/profile/user/UserConteiner.js","component/profile/myPost/MyPost.js","component/profile/myPost/MyPostArrays.js","component/profile/Profile.js","component/profile/ProfileConteiner.js"],"names":["setSettingCreator","min","max","Yup","trim","required","setStartCreator","setting","shape","setStatusValidation","status","setPostValidation","postText","setMessageValidation","messageText","module","exports","PostFormConteiner","connect","state","inputValue","getInputValueSelect","onSubmit","submittingForm","value","resetForm","initialValues","load","validationSchema","className","style","formSendPost","formTitle","name","type","component","formInput","formBtn","StatusConteiner","getStatusSelect","userId","useState","editMode","setEditMode","Input","btn","onDoubleClick","info","getInfo","item","UserConteiner","currentProfile","getCurrentProfileSelect","isSubmitting","getIsSubmittingSelect","dispatch","updateStatus","updateStatusThunkCreator","updatePhotos","photo","updatePhotosThunkCreator","UserStyle","profileWrap","backgroundImage","user","imgUser","src","photos","small","Logo","alt","userInfoWrap","userInfo","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","formData","action","onChange","e","target","files","Loader","MyPost","postData","post","React","createRef","ref","MyPostStyle","myPost","img","textWrap","text","MyPostArrays","userComment","map","index","comment","Profile","addYourMessage","ProfileConteinerAPI","props","getMyProfile","profileThunk","match","getStatus","isUpdatePhoto","setIsUpdatePhoto","useEffect","params","ProfileConteiner","compose","getUserCommentSelect","getIdSelect","getIsUpdatePhoto","id","profileThunkCreator","getStatusThunkCreator","getMyProfileOnHeaderThunkCreator","input","textChecker","addPostActionCreator","isUpdate","setUpdatePhotoActionCreator","withRouter"],"mappings":"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","file":"static/js/4.87c179d4.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\nimport React from \"react\";\r\nimport {ErrorMessage} from \"../../component/common/FormComponent/FormComponent\";\r\n\r\nconst setSettingCreator = (min, max) => Yup.string().trim().min(min, <ErrorMessage/>).max(max, <ErrorMessage/>).required(<ErrorMessage/>);\r\nconst setStartCreator   = setting => Yup.object().shape(setting);\r\n\r\nexport const setStatusValidation    = setStartCreator({status: setSettingCreator(1, 50)});\r\nexport const setPostValidation      = setStartCreator({postText: setSettingCreator(1, 50)});\r\nexport const setMessageValidation   = setStartCreator({messageText: setSettingCreator(1, 50)});\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSendPost\":\"postForm_formSendPost__15P5A\",\"formTitle\":\"postForm_formTitle__13ghg\",\"formInput\":\"postForm_formInput__QDS8N\",\"formBtn\":\"postForm_formBtn__2Rtsb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrap\":\"user_profileWrap__-W5Zj\",\"backgroundImage\":\"user_backgroundImage__3jOb-\",\"user\":\"user_user__3IDSu\",\"imgUser\":\"user_imgUser__2GiSe\",\"userInfoWrap\":\"user_userInfoWrap__1zVol\",\"userInfo\":\"user_userInfo__2Mpk_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"status_status__2Gh1B\",\"info\":\"status_info__7XY46\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPost\":\"myPost_myPost__1HBTl\",\"img\":\"myPost_img__3Q4Yx\",\"textWrap\":\"myPost_textWrap__2IUtZ\",\"text\":\"myPost_text__25K_K\",\"likeWrap\":\"myPost_likeWrap__3APgq\",\"like\":\"myPost_like__Xy2Ov\",\"likeCounter\":\"myPost_likeCounter__V_30l\"};","import {connect} from \"react-redux\";\nimport {PostForm} from \"./postForm\";\nimport {getInputValueSelect} from \"../../../utils/reselect/reselect\";\n\nconst mapStateToProps = state => {\n    return {\n        inputValue: getInputValueSelect(state)\n    };\n};\n\nconst mapDispatchToProps = () => {\n    return {};\n};\n\nexport const PostFormConteiner = connect(mapStateToProps, mapDispatchToProps)(PostForm);","import React from \"react\";\nimport style from \"./postForm.module.scss\";\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport {setPostValidation} from \"../../../utils/validate/validate\";\n\nexport const PostForm = ({onSubmit}) => {\n    const submittingForm = (value, resetForm) => {\n        onSubmit(value);\n        resetForm();\n    };\n\n    return (\n        <Formik initialValues={{postText: \"\", load: \"\"}} onSubmit={(value, {resetForm}) => submittingForm(value, resetForm)} validationSchema={setPostValidation}>\n            <Form className={style.formSendPost}>\n                <h3 className={style.formTitle}>My Post</h3>\n                <ErrorMessage name={\"postText\"}/>\n                <Field name={\"postText\"} type={\"text\"} component=\"input\" className={style.formInput}/>\n                <button type=\"submit\" className={style.formBtn}>send</button>\n            </Form>\n        </Formik>\n    )\n};","import {connect} from \"react-redux\";\r\nimport {Status} from \"./Status\";\r\nimport {getStatusSelect} from \"../../../../utils/reselect/reselect\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {status: getStatusSelect(state)};\r\n};\r\n\r\nconst mapDispatchToProps = () => {\r\n    return {};\r\n};\r\n\r\nexport const StatusConteiner = connect(mapStateToProps, mapDispatchToProps)(Status);","import React, {useState} from \"react\";\r\nimport style from \"./status.module.scss\";\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport {setStatusValidation} from \"../../../../utils/validate/validate\";\r\nimport {Input} from \"../../../common/FormComponent/FormComponent\";\r\n\r\nexport const Status = ({status, onSubmit, userId}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const changeEditMode = () => {\r\n        if (!userId) {\r\n            setEditMode(!editMode);\r\n        };\r\n    };\r\n\r\n    const submitting = (value, {resetForm}) => {\r\n        onSubmit(value);\r\n        resetForm();\r\n        setEditMode(!editMode);\r\n    };\r\n\r\n    if (!editMode) {\r\n        return (\r\n            <div className={style.status} onDoubleClick={changeEditMode}>\r\n                <p className={style.info}>О мне: {status || \"----------------------\"}</p>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Formik initialValues={{status: \"\"}} onSubmit={submitting} validationSchema={setStatusValidation}>\r\n            <Form>\r\n                <ErrorMessage name={\"status\"}/>\r\n                <Field type={\"text\"} name={\"status\"} component={Input}/>\r\n                <button type={\"submit\"} className={style.btn}>Save</button>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};","import React from \"react\";\nimport UserStyle from \"./user.module.scss\";\nimport {Loader} from \"../../loader/Loader\";\nimport Logo from \"../../../media/logo.jpg\";\nimport {StatusConteiner} from \"./status/StatusConteiner\";\n\nconst getInfo = item => {\n    if (item) {\n        return item;\n    };\n\n    return \"Неизвестно\";\n};\n\nexport const User = ({currentProfile, updateStatus, userId, updatePhotos}) => {\n    const onSubmit = formData => {\n        updateStatus(formData.status);\n    };\n\n    return currentProfile ? <div className={UserStyle.profileWrap}>\n        <div className={UserStyle.backgroundImage}></div>\n        <div className={UserStyle.user}>\n            <div>\n                <img className={UserStyle.imgUser} src={currentProfile.photos && currentProfile.photos.small ? currentProfile.photos.small : Logo} alt={\"#\"}/>\n            </div>\n            <div className={UserStyle.userInfoWrap}>\n                <p className={UserStyle.userInfo}>\n                    {`Имя: ${getInfo(currentProfile.fullName)}`}\n                </p>\n                <p className={UserStyle.userInfo}>\n                    {`О мне: ${getInfo(currentProfile.aboutMe)}`}\n                </p>\n                <p className={UserStyle.userInfo}>\n                    {`Работа: ${getInfo(currentProfile.lookingForAJob) + \"\"}`}\n                </p>\n                <p className={UserStyle.userInfo}>\n                    {`О работе: ${getInfo(currentProfile.lookingForAJobDescription)}`}\n                </p>\n                <p className={UserStyle.userInfo}>\n                    {`Контакты: ${getInfo(currentProfile.contacts && currentProfile.contacts.facebook ? currentProfile.contacts.facebook : null)}`}\n                </p>\n                <StatusConteiner userId={userId} onSubmit={onSubmit}/>\n                {\n                    !userId ? <form action=\"#\"><input type=\"file\" onChange={e => updatePhotos(e.target.files[0])}/></form> : null\n                }\n            </div>\n        </div>\n    </div> : <Loader/>;\n};","import {connect} from \"react-redux\";\nimport {User} from \"./User\";\nimport {updatePhotosThunkCreator, updateStatusThunkCreator} from \"../../../state/reducers/profileReducer\";\nimport {getCurrentProfileSelect, getIsSubmittingSelect} from \"../../../utils/reselect/reselect\";\n\nconst mapStateToProps = state => {\n    return {\n        currentProfile: getCurrentProfileSelect(state),\n        isSubmitting: getIsSubmittingSelect(state)\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateStatus: status => {\n            dispatch(updateStatusThunkCreator(status));\n        },\n        updatePhotos: photo => {\n            dispatch(updatePhotosThunkCreator(photo))\n        }\n    };\n};\n\nexport const UserConteiner = connect(mapStateToProps, mapDispatchToProps)(User);","import React from \"react\";\nimport MyPostStyle from \"./myPost.module.scss\";\n\nexport const MyPost = ({postData}) => {\n    const post = React.createRef();\n\n    return (\n        <div ref={post} className={MyPostStyle.myPost}>\n            <div className={MyPostStyle.img}></div>\n            <div className={MyPostStyle.textWrap}>\n                <p className={MyPostStyle.text}>{postData.text}</p>\n            </div>\n        </div>\n    );\n};\n","import {MyPost} from \"./MyPost\";\r\nimport React from \"react\";\r\n\r\nexport const MyPostArrays = ({userComment}) => {\r\n    return (\r\n        userComment.map((item, index) => {\r\n            const postData = {\r\n                text: item.comment,\r\n                status: userComment,\r\n                index: index\r\n            };\r\n\r\n            return (\r\n                <MyPost\r\n                    postData={postData}\r\n                    key={index}\r\n                />\r\n            )\r\n        })\r\n    );\r\n};","import React from \"react\";\nimport {PostFormConteiner} from \"./profileForm/postFormConteiner\";\nimport {UserConteiner} from \"./user/UserConteiner\";\nimport {MyPostArrays} from \"./myPost/MyPostArrays\";\n\nexport const Profile = ({userComment, addYourMessage, userId}) => {\n    const addPost = \"profile/ADD POST\";\n    const callAddYourMessage = value => addYourMessage(value, addPost);\n\n    return (\n        <div>\n            <UserConteiner userId={userId}/>\n            <PostFormConteiner onSubmit={callAddYourMessage}/>\n            <div><MyPostArrays userComment={userComment}/></div>\n        </div>\n    );\n};","import React, {useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {Profile} from \"./Profile\";\nimport {withRouter} from \"react-router-dom\";\nimport {\n    addPostActionCreator,\n    getStatusThunkCreator,\n    profileThunkCreator, setUpdatePhotoActionCreator,\n} from \"../../state/reducers/profileReducer\";\nimport {compose} from \"redux\";\nimport {getMyProfileOnHeaderThunkCreator} from \"../../state/reducers/authReducer\";\nimport {getIdSelect, getIsUpdatePhoto, getUserCommentSelect} from \"../../utils/reselect/reselect\";\n\nexport const ProfileConteinerAPI = (props) => {\n    const {getMyProfile, profileThunk, match, getStatus, userId, userComment, isUpdatePhoto, setIsUpdatePhoto} = props;\n\n    useEffect(() => {\n        if (!match.params.userId && !userId) {\n            getMyProfile();\n        };\n\n        profileThunk(match.params.userId || userId);\n        getStatus(match.params.userId || userId);\n    }, [!match.params.userId]);\n\n    useEffect(() => {\n        if (isUpdatePhoto) {\n            profileThunk(userId);\n            setIsUpdatePhoto(false);\n        };\n    }, [isUpdatePhoto]);\n\n    return <Profile userId={!!match.params.userId} userComment={userComment}/>;\n};\n\nconst mapStateToProps = state => {\n    return {\n        userComment: getUserCommentSelect(state),\n        userId: getIdSelect(state),\n        isUpdatePhoto: getIsUpdatePhoto(state)\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        profileThunk: id => {\n            dispatch(profileThunkCreator(id));\n        },\n        getStatus: userId => {\n            dispatch(getStatusThunkCreator(userId));\n        },\n        getMyProfile: () => {\n            dispatch(getMyProfileOnHeaderThunkCreator())\n        },\n        addYourMessage: (input, textChecker) => {\n            dispatch(addPostActionCreator(input, textChecker));\n        },\n        setIsUpdatePhoto: isUpdate => {\n            dispatch(setUpdatePhotoActionCreator(isUpdate));\n        }\n    };\n};\n\nconst ProfileConteiner = compose(connect(mapStateToProps, mapDispatchToProps), withRouter)(ProfileConteinerAPI);\nexport default ProfileConteiner;"],"sourceRoot":""}